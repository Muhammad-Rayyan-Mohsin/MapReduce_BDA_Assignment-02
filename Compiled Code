# Mapred - 1
import sys
for line in sys.stdin:
   for word in line.strip().split():
       print (word)

import sys
u=0
article_id=0
idvalues={}
for line in f:
   for word in line.split():
       idvalues[u]=word
       u=u+1
       if u==4000:
           print("Article id ",article_id,"word id",idvalues)
           article_id=article_id+1

# MapRed - 2
import sys 
id=0
for x in sys.stdin:
 word=x.strip().split()
 print(id,word)
 id=id+1

import sys
vocabulary=" "
for x in sys.stdin:
   x=x.strip().split()
   vocabulary=vocabulary+" "+x
   uniquewords=[]
for x in vocabulary.split():
   if x not in uniquewords:
       uniquewords.append(x)
u=0
wordcounts = {}
for word in uniquewords:
       wordcounts[u] = word
       u=u+1
for x in range(len(wordcounts)):
   idf=vocabulary.count(wordcounts[x])
   print(wordcounts[x],idf)

# MapRed - 3
import sys
for x in sys.stdin:
 x=x.strip().split()
 print(x)

import sys 
wordcounts={}
weights={}
u=0
idf=[]
for x in sys.stdin:
 x=x.strip().split
 idf.append(x)
 wordcounts[u]=x.count(wordcounts[x])
 u=u+1
for x in range(len(wordcounts)):
 tf=idf.count(wordcounts[x])
 idf2=idf[x]
 weights[x]=tf/idf2
print(weights1)

# Data preprocessing code

import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

# Download NLTK resources
import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')

# Read the dataset
df = pd.read_csv("Dataset.csv")

# Function to preprocess text
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    tokens = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]
    preprocessed_text = ' '.join(tokens)
    return preprocessed_text

df['SECTION_TEXT'] = df['SECTION_TEXT'].apply(preprocess_text)

df.to_csv("Cleaned_Dataset.csv", index=False)


# Code for generating  tf/idf values for each word in a document or sentence

sentence1="I wonder how many miles"
sentence2="I’ve fallen by this time?"
vocabulary=sentence1+" "+sentence2
uniquewords=[]
for x in vocabulary.split():
    if x not in uniquewords:
        uniquewords.append(x)
wordcounts=[]
u=0
wordcounts = {}
for word in uniquewords:
        wordcounts[u] = word
        u=u+1
idfrequency={}
for x in range(len(wordcounts)):
  idfrequency[x]=sentence1.count(wordcounts[x])
idfrequency2={}
for x in range(len(wordcounts)):
  idfrequency2[x]=sentence2.count(wordcounts[x])
for x in range(len(wordcounts)):
  if idfrequency[x]==0:
    del idfrequency[x]
for x in range(len(wordcounts)):
  if idfrequency2[x]==0:
    del idfrequency2[x]
weights1={}
for x in range(len(wordcounts)):
 tf=sentence1.count(wordcounts[x])
 idf=vocabulary.count(wordcounts[x])
 weights1[x]=tf/idf
print(weights1)
weights2={}
for x in range(len(wordcounts)):
 tf=sentence2.count(wordcounts[x])
 idf=vocabulary.count(wordcounts[x])
 weights2[x]=tf/idf
print(weights2)

## This code snippet implements a basic text mining process for a single input document. It tokenizes the document, computes its TF-IDF vector representation, and then normalizes the vector.

import numpy as np

document = input("Enter query: ")

tokenized_document = document.lower().split()

vocabulary = set(tokenized_document)
word_to_index = {word: idx for idx, word in enumerate(vocabulary)}

tf_matrix = np.zeros((1, len(vocabulary)))
for word in tokenized_document:
    word_idx = word_to_index[word]
    tf_matrix[0, word_idx] += 1

idf_vector = np.log(1 / (1 + np.sum(tf_matrix > 0, axis=0)))

tfidf_matrix = tf_matrix * idf_vector

norms = np.linalg.norm(tfidf_matrix, axis=1, keepdims=True)
tfidf_matrix_normalized = tfidf_matrix / norms

print("Normalized vector is: ")
print(tfidf_matrix_normalized)

# Calculating relevancy
relevancyscore=0
def findrelevancy(vector1, vector2):
    dotproduct = np.dot(vector1, vector2.T)
    relevancyscore=relevancyscore+dotproduct
    return relevancyscore
relevancy = findrelevancy(tfidf_matrix_normalized1, tfidf_matrix_normalized2)
print("Relevancy score with document is: ", relevancy)
if relevancy score>1 print("Document is relevant")
